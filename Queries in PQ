SELECT f.ddate_id,f.hours_id,passangers,f.method_id,capacity_per_hour AS max_per_hour
FROM fullinfo AS f
INNER JOIN max_capacity_per_hour AS mcph ON mcph.hours_id=f.hours_id AND mcph.method_id=f.method_id
/////////////////////////////////////
SELECT *
FROM method
///////////////////////////////////
let
Source = Odbc.Query("dsn=mysql/trasnport", 
"SELECT#(lf)idx,#(lf)CASE #(lf)WHEN hours>'12:00:00' THEN CONCAT(LEFT(SUBTIME(hours,'12:00:00'),2),'PM')#(lf)
WHEN hours='12:00:00' THEN CONCAT(LEFT(hours,2),'PM')#(lf)ELSE CONCAT(LEFT(hours,2),'AM') END AS times#(lf)FROM#(lf)#(tab)hours"),
#"Changed Type" = Table.TransformColumnTypes(Source,{{"idx", Int64.Type}}),
#"Added Conditional Column" = Table.AddColumn(#"Changed Type", "Custom", each if [times] = "06AM" then "6am-8am" else if [times] = "07AM" then "6am-8am" else if [times] = "08AM" then "8am-10am" else if [times] = "09AM" then "8am-10am" else if [times] = "10AM" then "10am-12pm" else if [times] = "11AM" then "10am-12pm" else if [times] = "12PM" then "12pm-2pm" else if [times] = "01PM" then "12pm-2pm" else if [times] = "02PM" then "2pm-4pm" else if [times] = "03PM" then "2pm-4pm" else if [times] = "04PM" then "4pm-6pm" else if [times] = "05PM" then "4pm-6pm" else if [times] = "06PM" then "6pm-8pm" else if [times] = "07PM" then "6pm-8pm" else "8pm-10pm", type text),
#"Renamed Columns" = Table.RenameColumns(#"Added Conditional Column",{{"Custom", "HourGroup"}}),
#"Merged Queries" = Table.NestedJoin(#"Renamed Columns", {"HourGroup"}, HourGroup, {"HourGroup"}, "HourGroup.1", JoinKind.RightOuter),
#"Expanded HourGroup.1" = Table.ExpandTableColumn(#"Merged Queries", "HourGroup.1", {"Index"}, {"Index"}),
#"Renamed Columns1" = Table.RenameColumns(#"Expanded HourGroup.1",{{"Index", "IndexHour"}}),
#"Removed Columns" = Table.RemoveColumns(#"Renamed Columns1",{"HourGroup"})
in
#"Removed Columns"
//////////////////////////////////
let
Source = Odbc.Query("dsn=mysql/trasnport", 
"SELECT#(lf)idx,#(lf)CASE #(lf)WHEN hours>'12:00:00' THEN CONCAT(LEFT(SUBTIME(hours,'12:00:00'),2),'PM')#(lf)
WHEN hours='12:00:00' THEN CONCAT(LEFT(hours,2),'PM')#(lf)ELSE CONCAT(LEFT(hours,2),'AM') END AS times#(lf)FROM#(lf)#(tab)hours"),
#"Changed Type" = Table.TransformColumnTypes(Source,{{"idx", Int64.Type}}),
#"Added Conditional Column" = Table.AddColumn(#"Changed Type", "Custom", each if [times] = "06AM" then "6am-8am" else if [times] = "07AM" then "6am-8am" else if [times] = "08AM" then "8am-10am" else if [times] = "09AM" then "8am-10am" else if [times] = "10AM" then "10am-12pm" else if [times] = "11AM" then "10am-12pm" else if [times] = "12PM" then "12pm-2pm" else if [times] = "01PM" then "12pm-2pm" else if [times] = "02PM" then "2pm-4pm" else if [times] = "03PM" then "2pm-4pm" else if [times] = "04PM" then "4pm-6pm" else if [times] = "05PM" then "4pm-6pm" else if [times] = "06PM" then "6pm-8pm" else if [times] = "07PM" then "6pm-8pm" else "8pm-10pm", type text),
#"Renamed Columns" = Table.RenameColumns(#"Added Conditional Column",{{"Custom", "GroupTime"}}),
#"Added Index" = Table.AddIndexColumn(#"Renamed Columns", "Index", 1, 1, Int64.Type),
GroupTime1 = #"Added Index"[GroupTime],
#"Removed Duplicates" = List.Distinct(GroupTime1),
#"Converted to Table" = Table.FromList(#"Removed Duplicates", Splitter.SplitByNothing(), null, null, ExtraValues.Error),
#"Changed Type1" = Table.TransformColumnTypes(#"Converted to Table",{{"Column1", type text}}),
#"Renamed Columns1" = Table.RenameColumns(#"Changed Type1",{{"Column1", "HourGroup"}}),
#"Added Index1" = Table.AddIndexColumn(#"Renamed Columns1", "Index", 1, 1, Int64.Type),
#"Reordered Columns" = Table.ReorderColumns(#"Added Index1",{"Index", "HourGroup"})
in
#"Reordered Columns"
/////////////////////////////////////
let
Source = #date(2020, 1, 1),
Custom1 = List.Dates(Source,Number.From(#date(2020,12,31))-Number.From(Source),#duration(1,0,0,0)),
#"Converted to Table" = Table.FromList(Custom1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
#"Changed Type" = Table.TransformColumnTypes(#"Converted to Table",{{"Column1", type date}}),
#"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"Column1", "Dates"}}),
#"Inserted Year" = Table.AddColumn(#"Renamed Columns", "Year", each Date.Year([Dates]), Int64.Type),
#"Inserted Month" = Table.AddColumn(#"Inserted Year", "Month", each Date.Month([Dates]), Int64.Type),
#"Inserted Month Name" = Table.AddColumn(#"Inserted Month", "Month Name", each Date.MonthName([Dates]), type text),
#"Extracted First Characters" = Table.TransformColumns(#"Inserted Month Name", {{"Month Name", each Text.Start(_, 3), type text}}),
#"Inserted Day" = Table.AddColumn(#"Extracted First Characters", "Day", each Date.Day([Dates]), Int64.Type),
#"Added Conditional Column" = Table.AddColumn(#"Inserted Day", "Mins", each if [Day] <= 15 then 1 else if [Day] >= 16 then 15 else null),
#"Added Conditional Column1" = Table.AddColumn(#"Added Conditional Column", "Maxs", each if [Day] <= 15 then 15 else if [Day] >= 16 then 30 else null),
#"Changed Type1" = Table.TransformColumnTypes(#"Added Conditional Column1",{{"Maxs", Int64.Type}, {"Mins", Int64.Type}}),
#"Inserted Merged Column" = Table.AddColumn(#"Changed Type1", "Merged", each Text.Combine({[Month Name], "/", Text.From([Mins], "en-US"), " to ", [Month Name], "/", Text.From([Maxs], "en-US")}), type text),
#"Renamed Columns1" = Table.RenameColumns(#"Inserted Merged Column",{{"Merged", "BiWeekGroup"}}),
#"Removed Columns" = Table.RemoveColumns(#"Renamed Columns1",{"Mins", "Maxs"}),
#"Added Index" = Table.AddIndexColumn(#"Removed Columns", "Index", 1, 1, Int64.Type),
#"Reordered Columns" = Table.ReorderColumns(#"Added Index",{"Index", "Dates", "Year", "Month", "Month Name", "Day", "BiWeekGroup"}),
BiWeekGroup1 = #"Reordered Columns"[BiWeekGroup],
#"Removed Duplicates" = List.Distinct(BiWeekGroup1),
#"Converted to Table1" = Table.FromList(#"Removed Duplicates", Splitter.SplitByNothing(), null, null, ExtraValues.Error),
#"Changed Type2" = Table.TransformColumnTypes(#"Converted to Table1",{{"Column1", type text}}),
#"Added Index1" = Table.AddIndexColumn(#"Changed Type2", "Index", 1, 1, Int64.Type),
#"Reordered Columns1" = Table.ReorderColumns(#"Added Index1",{"Index", "Column1"}),
#"Renamed Columns2" = Table.RenameColumns(#"Reordered Columns1",{{"Column1", "WeekGroup"}})
in
#"Renamed Columns2"
